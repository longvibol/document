Connnect from BE to EN

1. install axios : npm install axios
2. configer port call 
Ex: error : " CORS policy "

Access to XMLHttpRequest at 'http://localhost:5000/hello-world' from origin 'http://localhost:3000' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.

be :5000
fe :3000 
port 3000 block 5000

Configuration : Overight Method in BE

@Bean
	public WebMvcConfigurer corsConfigurer() {
		return new WebMvcConfigurer() {
			public void addCorsMappings(CorsRegistry registry) {
				
				registry.addMapping("/**") // allow all path partern /** mean allow every thing
					.allowedMethods("*") // allow method : get, put, post .... 
					.allowedOrigins("http://localhost:3000/"); // where we put the source comming from 
			}
		};
	}

---------------------------------------- 
In FE : 

function callHelloWorldRestApi(){

        axios.get("http://localhost:5000/hello-world-bean") // url where we want them to view : axios is call back funtion.
        .then((response)=>successfullResponse(response)) // when success can find URL 
        .catch((error)=>errorResponse(error)) // when error happen 
        .finally(()=>console.log('cleanup')) // if above finsih "Clean Up" 

    }

// create function then handdle success and error:

    function successfullResponse(response){
        console.log(response)
        setMessage(response.data.message)
    }

    function errorResponse(error){
        console.log(error)
    }

============================================================ 

We normaly crate another folder to set the API call 

1. Folder: Api => file "name the service from BE" : HelloWorldApiService.js
Ex: 

Option 1: 
export function retriveHelloWorldBean(){
     return axios.get("http://localhost:5000/hello-world-bean")
}

Option 2: 
export const retriveHelloWorldBean 
    = () => axios.get("http://localhost:5000/hello-world-bean")


==========================================
** Show List to Front End 

1. Create Api Service 
Ex: 
import axios from "axios";

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:5000'
    }
)

export const retriveAllTodosForusername 
    = (username) => apiClient.get(`/users/${username}/todos`)

// http://localhost:5000/users/vibol/todos



2. Use " useEffect " Method to call the function when it start the page:   

useEffect(() => refreshTodos(),[])

    function refreshTodos(){
        retriveAllTodosForusername('vibol')
            .then(response =>  {
                console.log(response.data)
                setTodos(response.data)
            }             
                )
            .catch(error => console.log(error))
    }     

To see detail on the useEffect (Ctrl + click) 

=======================================================  

Note: 
<td>{todo.targetDate.toDateString()}</td> : toDateString() = convert from Date to String 
<td>{todo.targetDate.toString()}</td> : toString = received as String 


========================================================


Delete Button call API: 
1. create button then call the functon from the service api 
2. Display message after deleted 

Ex: 

* In API service: 

export const deleteTodoApi 
    = (username, id) => apiClient.delete(`/users/${username}/todo/${id}`)

///users/vibol/todo/1

* In List of todo 

function deleteTodo(id){
        // console.log('clicked ' + id)
        // want to call deleted api 
        deleteTodoApi('vibol', id)
        .then(
            // 1: Display message 
            () => {
                setMessage(`Delete of todo with id : ${id} successful`)
                refreshTodos()
            }
            // 2: update the todo list

        )
        .catch((error) => console.log(error))
return (

<td><button className="btn btn-warning" onClick={()=>deleteTodo(todo.id)}>Delete</button></td>

)


--------------------------------------------------


















































































































